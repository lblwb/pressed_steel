<?php

//add_action('phpmailer_init', 'setup_smtp_mailer');
//function setup_smtp_mailer($phpmailer)
//{
//    $phpmailer->isSMTP();
//    $phpmailer->Host = 'mail.nic.ru'; // SMTP-—Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä smtp.yandex.ru, smtp.gmail.com –∏ —Ç.–ø.)
//    $phpmailer->SMTPAuth = true;
//    $phpmailer->Port = 465;           // 465 –¥–ª—è SSL –∏–ª–∏ 587 –¥–ª—è TLS
//    $phpmailer->Username = 'site@pressedsteel.ru'; // —Ç–≤–æ–π email
//    $phpmailer->Password = '0hUtXezcWYZzU0l';      // –ü–∞—Ä–æ–ª—å –æ—Ç SMTP
//    $phpmailer->SMTPSecure = 'ssl';         // –ª–∏–±–æ 'tls' –¥–ª—è –ø–æ—Ä—Ç–∞ 587
//    $phpmailer->From = 'site@pressedsteel.ru';
//    $phpmailer->FromName = 'Pressed Steel [SITE]';       // –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
//}

//
class PressedSteelOrderHandler
{

    private string $admin_email = 'info@pressedsteel.ru';
    private string $from_email = 'site@pressedsteel.ru';
    private string $from_name = 'Pressed Steel Site';
    private string $info_email = 'info@pressedsteel.ru';

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ REST-–∑–∞–ø—Ä–æ—Å–∞
     *
     * @param WP_REST_Request $request
     * @return WP_REST_Response
     */
    public function handle_request(WP_REST_Request $request): WP_REST_Response
    {
        try {
            $params = $request->get_json_params();

            $form = $params['form'] ?? [];
            $cartItems = $params['cartItems'] ?? [];

            if (empty($cartItems)) {
                return $this->error_response('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', 400);
            }

            $data = [
                'org' => sanitize_text_field($form['org'] ?? ''),
                'inn' => sanitize_text_field($form['inn'] ?? ''),
                'fio' => sanitize_text_field($form['fio'] ?? ''),
                'phone' => sanitize_text_field($form['phone'] ?? ''),
                'email' => sanitize_email($form['email'] ?? ''),
                'cartItems' => $cartItems,
                'order_date' => date('d.m.Y H:i'),
            ];

//            return var_dump($this->admin_email);

//            return;

            // –ü–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É
            if (!empty($data['email'])) {
                $client_subject = '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ pressedsteel.ru';
                $client_message = $this->build_email_message($data, false);
                $this->send_email(esc_html($data['email']), $client_subject, $client_message, $this->admin_email);
            }

            // –ü–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            $admin_subject = 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞: [pressedsteel.ru]';
            $admin_message = $this->build_email_message($data, true);
            $admin_sent = $this->send_email(esc_html($this->admin_email), $admin_subject, $admin_message, esc_html($data['email']));
            if (!$admin_sent) {
                return $this->error_response('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!', 500);
            }

            return $this->success_response('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        } catch (Exception $e) {
            return $this->error_response('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' . $e->getMessage(), 500);
        }
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
     *
     * @param array $data
     * @param bool $is_admin
     * @return string
     */
    private function build_email_message(array $data, bool $is_admin): string
    {
        $fio = esc_html($data['fio']);
        $org = esc_html($data['org']);
        $inn = esc_html($data['inn']);
        $phone = esc_html($data['phone']);
        $email = esc_html($data['email']);
        $cartItems = $data['cartItems'];
        $order_date = esc_html($data['order_date']);

        $message = '';

        if ($is_admin) {
            $message .= '<h4>üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞: [pressedsteel.ru]</h4>';
            $message .= '<hr>';
            $message .= '<p><strong>–§–æ—Ä–º–∞:</strong> –ó–ê–ö–ê–ó–ê</p>';
            $message .= '<hr><br>';
            $message .= '<h4>üë§ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞:</h4>';
        } else {
            $message .= '<h4>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</h4>';
        }

        $message .= '<ul>';
        $message .= "<li><strong>–§–ò–û:</strong> {$fio}</li>";
        $message .= "<li><strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</strong> {$org}</li>";
        $message .= "<li><strong>–ò–ù–ù:</strong> {$inn}</li>";
        $message .= "<li><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {$phone}</li>";
        $message .= "<li><strong>Email:</strong> {$email}</li>";
        $message .= '</ul>';
        $message .= '<hr><br>';


        $message .= '<h4>üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</h4>';
        $message .= '<table style="width:100%; border-collapse: collapse; font-family: Arial, sans-serif;">';
        $message .= '<thead>';
        $message .= '<tr style="background-color:#f4f4f4; text-align:left;">';
        $message .= '<th style="border:1px solid #ddd; padding:8px;">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</th>';
        $message .= '<th style="border:1px solid #ddd; padding:8px;">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</th>';
        $message .= '<th style="border:1px solid #ddd; padding:8px;">–ö–æ–ª-–≤–æ</th>';
        $message .= '<th style="border:1px solid #ddd; padding:8px;">–°—Å—ã–ª–∫–∞</th>';
        $message .= '</tr>';
        $message .= '</thead><tbody>';

        foreach ($cartItems as $item) {
            $name = sanitize_text_field($item['name'] ?? '‚Äî');
            $quantity = absint($item['quantity'] ?? 0);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            $attributes = '';
            if (!empty($item['attributes']) && is_array($item['attributes'])) {
                foreach ($item['attributes'] as $key => $value) {
                    $attributes .= esc_html($key) . ': ' . esc_html($value) . '<br>';
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            $link = '#';
            if (!empty($item['product_id'])) {
//                var_dump($item);
                $link = get_permalink(intval(base64_decode($item['product_id'])));
            }

            $message .= '<tr>';
            $message .= '<td style="border:1px solid #ddd; padding:8px;">' . esc_html($name) . '</td>';
            $message .= '<td style="border:1px solid #ddd; padding:8px;">' . $attributes . '</td>';
            $message .= '<td style="border:1px solid #ddd; padding:8px;">' . $quantity . '</td>';
            $message .= '<td style="border:1px solid #ddd; padding:8px;"><a href="' . esc_url($link) . '" target="_blank">–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a></td>';
            $message .= '</tr>';
        }

        $message .= '</tbody></table>';
        $message .= '<hr><br>';

        if (!$is_admin) {
            $message .= '<p>–í—ã –º–æ–∂–µ—Ç–µ —É—Å–∫–æ—Ä–∏—Ç—å –Ω–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –∑–∞–ø–æ–ª–Ω–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–µ –Ω–∞–º –ø–æ –∞–¥—Ä–µ—Å—É: <a href="mailto:' . esc_html($this->info_email) . '">' . esc_html($this->info_email) . '</a></p>';
            $message .= '<hr><br>';
        }

        $message .= '<p><strong>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</strong> ' . $order_date . '</p>';
        return $message;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
     *
     * @param string $to
     * @param string $subject
     * @param string $message
     * @param string|null $reply_to
     * @return bool
     */
    private function send_email(string $to, string $subject, string $message, ?string $reply_to = null): bool
    {
        $headers = [
            'From: ' . $this->from_name . ' <' . $this->from_email . '>',
            'Content-Type: text/html; charset=UTF-8',
        ];

        if ($reply_to) {
            $headers[] = 'Reply-To: ' . sanitize_email($reply_to);
        }


//        wp_log()
        return wp_mail($to, $subject, $message, $headers);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç REST API
     *
     * @param string $message
     * @return WP_REST_Response
     */
    private function success_response(string $message): WP_REST_Response
    {
        return new WP_REST_Response([
            'success' => true,
            'message' => $message,
        ], 200);
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç REST API
     *
     * @param string $message
     * @param int $code
     * @return WP_REST_Response
     */
    private function error_response(string $message, int $code = 400): WP_REST_Response
    {
        return new WP_REST_Response([
            'success' => false,
            'message' => $message,
        ], $code);
    }
}